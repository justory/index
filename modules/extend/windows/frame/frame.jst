/**
 * 子窗口模块
 * ver 1.0.1
 * @author {@link http://justory.cn/#frame}
 */

const ret = {
	name(arg) {
		const cfg = justory.configs;
		let [opt, moduleName] = [arg[0], ""];
		if (opt) {
			let module = opt.module;
			let name = opt.name || cfg.defaultFN;
			moduleName = module + "_" + name;
		}
		return moduleName || api.frameName;
	},
	open(...arg) {
		const cfg = justory.configs;
		let opt = arg[0];
		let module = opt.module;
		let name = opt.name || cfg.defaultFN;
		let moduleName = module + '_' + name;
		let url = opt.url || cfg.static + module + '/' + name + '.' + cfg.defaultFT;
		let sbHeight = cfg.statusBarHeight;
		let rect = opt.rect || {};
		let animation = opt.animation || {
			type: cfg.winAnt(1)
		};
		let pageParam = opt.pageParam || {};
		const frameOpt = {
			name: moduleName,
			url,
			bgColor: opt.bgColor || 'rgba(255,255,255,0)',
			bounces: (opt.bounces === false) ? false : true,
			vScrollBarEnabled: (opt.vScrollBarEnabled === true) ? true : false,
			hScrollBarEnabled: (opt.hScrollBarEnabled === false) ? false : true,
			scrollToTop: (opt.scrollToTop === false) ? false : true,
			scaleEnabled: (opt.scaleEnabled === true) ? true : false,
			allowEdit: (opt.allowEdit === true) ? true : false,
			softInputMode: opt.softInputMode || 'auto',
			reload: (opt.reload === true) ? true : false,
			progress: opt.progressColor && {
				type: "page",
				color: opt.progressColor
			},
			pageParam: pageParam,
			rect: {
				x: rect.x || 0,
				y: (rect._y || rect._y === 0) ? rect._y : ((rect.y) ? rect.y + sbHeight : sbHeight),
				w: rect.w || api.winWidth,
				h: (rect._h) ? rect._h : ((rect.h) ? rect.h - sbHeight : api.winHeight - sbHeight),
				marginLeft: rect.marginLeft || 0,
				marginTop: rect.marginTop || 0,
				marginBottom: rect.marginBottom || 0,
				marginRight: rect.marginRight || 0
			}
		};
		cfg.ios && [frameOpt.animation = animation];
		api.openFrame(frameOpt);
		opt.progressColor && api.setFrameClient({
			frameName: moduleName
		}, function(ret) {
			justory.data.send({
				win: {
					moduleName: api.winName
				},
				data: {
					type: "frameClient",
					ret
				}
			})
			justory.log('getFrameClient:', ret)
		})
		if (opt.hidden === true) api.setFrameAttr({
			name: moduleName,
			hidden: true
		})
		justory.log('openFrame:', {
			name: moduleName,
			url,
			pageParam: pageParam
		})
	},
	close(...arg) {
		const name = ret.name(arg);
		api.closeFrame({
			name
		})
		justory.log('closeFrame:', {
			name
		})
	},
	hide(...arg) {
		const name = ret.name(arg);
		api.setFrameAttr({
			hidden: true,
			name
		})
		justory.log('hideFrame:', {
			name
		})
	},
	show(...arg) {
		const name = ret.name(arg);
		api.setFrameAttr({
			hidden: false,
			name
		})
		if (api.winName && api.frameName && api.pageParam._hidden === true && api.winName.indexOf('ABW_') > -1) {
			api.sendEvent({
				name: 'loadingRemove'
			})
		}
		justory.log('showFrame:', {
			name
		})
	}
}
export default ret;